import { useState, useEffect, useRef, useCallback } from 'react'
import { motion, AnimatePresence, useAnimation } from 'framer-motion'
import { create } from 'zustand'
import styled, { keyframes } from 'styled-components'

// „Ç´„É©„Éº„Éë„É¨„ÉÉ„Éà
const colors = {
  primary: '#4EB5FF',
  secondary: '#38C172',
  accent: '#FFD93D',
  danger: '#FF6B6B',
  purple: '#9333EA',
  pink: '#EC4899',
  dark: '#0a0a0a',
  darker: '#000000',
  light: '#ffffff',
  gradient: 'linear-gradient(135deg, #4EB5FF 0%, #38C172 50%, #FFD93D 100%)'
}

// „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÂÆöÁæ©
const fadeIn = keyframes`
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
`

const pulse = keyframes`
  0%, 100% {
    transform: scale(1);
    opacity: 0.8;
  }
  50% {
    transform: scale(1.1);
    opacity: 1;
  }
`

const voiceWave = keyframes`
  0% {
    transform: scaleY(0.5);
  }
  50% {
    transform: scaleY(1.5);
  }
  100% {
    transform: scaleY(0.5);
  }
`

const glow = keyframes`
  0%, 100% {
    box-shadow: 0 0 10px rgba(78, 181, 255, 0.5);
  }
  50% {
    box-shadow: 0 0 30px rgba(78, 181, 255, 1);
  }
`

const float = keyframes`
  0%, 100% {
    transform: translateY(0);
  }
  50% {
    transform: translateY(-10px);
  }
`

// „Çπ„Çø„Ç§„É´„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
const Container = styled.div`
  min-height: 100vh;
  background: linear-gradient(
    180deg,
    #0a0a0a 0%,
    #1a1a2e 15%,
    #16213e 30%,
    #0f3460 45%,
    #533483 60%,
    #7209b7 75%,
    #16213e 90%,
    #0a0a0a 100%
  );
  overflow-x: hidden;
  position: relative;
`

const VoiceWaveContainer = styled.div`
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 2px;
  height: 120px;
  
  .wave-bar {
    width: 4px;
    background: ${colors.gradient};
    border-radius: 2px;
    animation: ${voiceWave} 0.5s ease-in-out infinite;
    
    &:nth-child(2n) {
      animation-delay: 0.1s;
    }
    
    &:nth-child(3n) {
      animation-delay: 0.2s;
    }
    
    &:nth-child(4n) {
      animation-delay: 0.3s;
    }
  }
`

const MicButton = styled(motion.button)`
  width: 120px;
  height: 120px;
  border-radius: 50%;
  border: none;
  background: ${colors.gradient};
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 3rem;
  position: relative;
  animation: ${glow} 2s ease-in-out infinite;
  
  &:hover {
    transform: scale(1.1);
  }
  
  &.listening {
    background: linear-gradient(135deg, #FF6B6B 0%, #EC4899 100%);
    animation: ${pulse} 1s ease-in-out infinite;
  }
`

const CoachCard = styled(motion.div)`
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(10px);
  border-radius: 16px;
  padding: 20px;
  border: 1px solid rgba(255, 255, 255, 0.2);
  cursor: pointer;
  transition: all 0.3s ease;
  
  &:hover {
    transform: translateY(-5px);
    background: rgba(255, 255, 255, 0.15);
  }
  
  &.active {
    border-color: ${colors.primary};
    background: rgba(78, 181, 255, 0.1);
  }
`

const ModuleCard = styled(motion.div)`
  background: rgba(255, 255, 255, 0.05);
  backdrop-filter: blur(10px);
  border-radius: 12px;
  padding: 16px;
  border: 1px solid rgba(255, 255, 255, 0.1);
  margin-bottom: 12px;
  
  .progress-bar {
    height: 4px;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 2px;
    overflow: hidden;
    margin-top: 8px;
    
    .progress-fill {
      height: 100%;
      background: ${colors.gradient};
      transition: width 0.3s ease;
    }
  }
`

const AnalyticsCard = styled.div`
  background: rgba(255, 255, 255, 0.05);
  backdrop-filter: blur(10px);
  border-radius: 16px;
  padding: 24px;
  border: 1px solid rgba(255, 255, 255, 0.1);
  
  .metric {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 16px;
    
    &:last-child {
      margin-bottom: 0;
    }
    
    .label {
      color: rgba(255, 255, 255, 0.7);
      font-size: 14px;
    }
    
    .value {
      color: ${colors.primary};
      font-size: 18px;
      font-weight: bold;
    }
  }
`

// Types
interface VoiceState {
  isListening: boolean
  transcript: string
  language: 'ja' | 'en'
  volume: number
  error: string | null
}

interface Conversation {
  id: string
  type: 'user' | 'ai'
  text: string
  timestamp: Date
}

// Voice Store
interface LearningModule {
  id: string
  title: string
  progress: number
  difficulty: 'beginner' | 'intermediate' | 'advanced'
  skills: string[]
  estimatedTime: string
  unlocked: boolean
}

interface VoiceCoach {
  id: string
  name: string
  personality: string
  expertise: string[]
  avatar: string
  voice: 'male' | 'female'
  active: boolean
}

interface VoiceAnalytics {
  sessionTime: number
  wordsSpoken: number
  questionsAsked: number
  topicsDiscussed: string[]
  confidenceLevel: number
  engagementScore: number
}

interface VoiceStore {
  voiceState: VoiceState
  conversations: Conversation[]
  modules: LearningModule[]
  coaches: VoiceCoach[]
  analytics: VoiceAnalytics
  selectedCoach: string
  currentModule: string | null
  setListening: (isListening: boolean) => void
  setTranscript: (transcript: string) => void
  setVolume: (volume: number) => void
  setError: (error: string | null) => void
  addConversation: (type: 'user' | 'ai', text: string) => void
  clearConversations: () => void
  updateProgress: (moduleId: string, progress: number) => void
  selectCoach: (coachId: string) => void
  updateAnalytics: (updates: Partial<VoiceAnalytics>) => void
  setCurrentModule: (moduleId: string) => void
}

const useVoiceStore = create<VoiceStore>((set, get) => ({
  voiceState: {
    isListening: false,
    transcript: '',
    language: 'ja',
    volume: 0,
    error: null
  },
  conversations: [],
  modules: [
    {
      id: 'basics',
      title: 'AI√óDXËµ∑Ê•≠„ÅÆÂü∫Á§é',
      progress: 0,
      difficulty: 'beginner',
      skills: ['AIÁêÜËß£', 'DXÊà¶Áï•', '„Éì„Ç∏„Éç„Çπ„É¢„Éá„É´'],
      estimatedTime: '2ÈÄ±Èñì',
      unlocked: true
    },
    {
      id: 'automation',
      title: '„Éé„Éº„Ç≥„Éº„ÉâËá™ÂãïÂåñ',
      progress: 0,
      difficulty: 'intermediate',
      skills: ['Zapier', 'Make', 'Bubble'],
      estimatedTime: '3ÈÄ±Èñì',
      unlocked: false
    },
    {
      id: 'scaling',
      title: '„Çπ„Ç±„Éº„É™„É≥„Ç∞Êà¶Áï•',
      progress: 0,
      difficulty: 'advanced',
      skills: ['„ÉÅ„Éº„É†ÊßãÁØâ', '„Ç∑„Çπ„ÉÜ„É†Âåñ', 'Ë≥áÈáëË™øÈÅî'],
      estimatedTime: '4ÈÄ±Èñì',
      unlocked: false
    }
  ],
  coaches: [
    {
      id: 'takeshi',
      name: 'Áî∞‰∏≠Ê≠¶Âøó',
      personality: 'friendly',
      expertise: ['AIÊà¶Áï•', '„Çπ„Çø„Éº„Éà„Ç¢„ÉÉ„Éó'],
      avatar: 'üë®‚Äçüíº',
      voice: 'male',
      active: true
    },
    {
      id: 'yuki',
      name: '‰ΩêËó§Èõ™',
      personality: 'analytical',
      expertise: ['DXÊé®ÈÄ≤', '„Éá„Éº„ÇøÂàÜÊûê'],
      avatar: 'üë©‚Äçüíª',
      voice: 'female',
      active: false
    }
  ],
  analytics: {
    sessionTime: 0,
    wordsSpoken: 0,
    questionsAsked: 0,
    topicsDiscussed: [],
    confidenceLevel: 50,
    engagementScore: 0
  },
  selectedCoach: 'takeshi',
  currentModule: null,
  setListening: (isListening) => set((state) => ({
    voiceState: { ...state.voiceState, isListening }
  })),
  setTranscript: (transcript) => set((state) => ({
    voiceState: { ...state.voiceState, transcript }
  })),
  setVolume: (volume) => set((state) => ({
    voiceState: { ...state.voiceState, volume }
  })),
  setError: (error) => set((state) => ({
    voiceState: { ...state.voiceState, error }
  })),
  addConversation: (type, text) => set((state) => ({
    conversations: [...state.conversations, {
      id: Date.now().toString(),
      type,
      text,
      timestamp: new Date()
    }]
  })),
  clearConversations: () => set({ conversations: [] }),
  updateProgress: (moduleId, progress) => set((state) => ({
    modules: state.modules.map(module => 
      module.id === moduleId ? { ...module, progress } : module
    )
  })),
  selectCoach: (coachId) => set((state) => ({
    selectedCoach: coachId,
    coaches: state.coaches.map(coach => ({
      ...coach,
      active: coach.id === coachId
    }))
  })),
  updateAnalytics: (updates) => set((state) => ({
    analytics: { ...state.analytics, ...updates }
  })),
  setCurrentModule: (moduleId) => set({ currentModule: moduleId })
}))

// È´òÂ∫¶„Å™„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
function LearningModulesList() {
  const { modules, updateProgress, setCurrentModule } = useVoiceStore()
  
  const handleModuleClick = (moduleId: string) => {
    setCurrentModule(moduleId)
    // „Éá„É¢Áî®„Å´ÈÄ≤Êçó„ÇíÂ∞ë„ÅóÈÄ≤„ÇÅ„Çã
    const currentProgress = modules.find(m => m.id === moduleId)?.progress || 0
    if (currentProgress < 100) {
      updateProgress(moduleId, Math.min(currentProgress + 10, 100))
    }
  }
  
  return (
    <div className="space-y-4">
      <h3 className="text-xl font-bold text-white mb-4">
        üéì Â≠¶Áøí„É¢„Ç∏„É•„Éº„É´
      </h3>
      {modules.map((module) => (
        <ModuleCard
          key={module.id}
          initial={{ opacity: 0, x: -20 }}
          animate={{ opacity: 1, x: 0 }}
          onClick={() => handleModuleClick(module.id)}
          className="cursor-pointer hover:scale-105 transition-transform"
        >
          <div className="flex justify-between items-start mb-2">
            <h4 className="text-white font-semibold">{module.title}</h4>
            <span className={`px-2 py-1 rounded text-xs ${
              module.difficulty === 'beginner' ? 'bg-green-500/20 text-green-300' :
              module.difficulty === 'intermediate' ? 'bg-yellow-500/20 text-yellow-300' :
              'bg-red-500/20 text-red-300'
            }`}>
              {module.difficulty}
            </span>
          </div>
          <p className="text-gray-400 text-sm mb-2">
            ‚è±Ô∏è {module.estimatedTime}
          </p>
          <div className="flex flex-wrap gap-1 mb-3">
            {module.skills.map((skill) => (
              <span
                key={skill}
                className="px-2 py-1 bg-purple-500/20 text-purple-300 text-xs rounded"
              >
                {skill}
              </span>
            ))}
          </div>
          <div className="progress-bar">
            <div 
              className="progress-fill"
              style={{ width: `${module.progress}%` }}
            />
          </div>
          <p className="text-xs text-gray-500 mt-1">
            ÈÄ≤Êçó: {module.progress}%
          </p>
        </ModuleCard>
      ))}
    </div>
  )
}

function CoachPersonalitySelector() {
  const { coaches, selectedCoach, selectCoach } = useVoiceStore()
  
  return (
    <div className="space-y-4">
      <h3 className="text-xl font-bold text-white mb-4">
        ü§ñ AI„Ç≥„Éº„ÉÅÈÅ∏Êäû
      </h3>
      <div className="grid gap-4">
        {coaches.map((coach) => (
          <CoachCard
            key={coach.id}
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            onClick={() => selectCoach(coach.id)}
            className={coach.active ? 'active' : ''}
          >
            <div className="flex items-center gap-3">
              <div className="text-3xl">{coach.avatar}</div>
              <div className="flex-1">
                <h4 className="text-white font-semibold">{coach.name}</h4>
                <p className="text-sm text-gray-400 capitalize">
                  {coach.personality} „Çø„Ç§„Éó
                </p>
                <div className="flex flex-wrap gap-1 mt-2">
                  {coach.expertise.map((skill) => (
                    <span
                      key={skill}
                      className="px-2 py-1 bg-blue-500/20 text-blue-300 text-xs rounded"
                    >
                      {skill}
                    </span>
                  ))}
                </div>
              </div>
              {coach.active && (
                <div className="w-3 h-3 bg-green-400 rounded-full animate-pulse" />
              )}
            </div>
          </CoachCard>
        ))}
      </div>
    </div>
  )
}

function VoiceAnalyticsDashboard() {
  const { analytics } = useVoiceStore()
  
  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60)
    const secs = seconds % 60
    return `${mins}:${secs.toString().padStart(2, '0')}`
  }
  
  return (
    <AnalyticsCard>
      <h3 className="text-xl font-bold text-white mb-6">
        üìä Èü≥Â£∞ÂàÜÊûê„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ
      </h3>
      
      <div className="metric">
        <span className="label">„Çª„ÉÉ„Ç∑„Éß„É≥ÊôÇÈñì</span>
        <span className="value">{formatTime(analytics.sessionTime)}</span>
      </div>
      
      <div className="metric">
        <span className="label">Áô∫Ë©±ÂçòË™ûÊï∞</span>
        <span className="value">{analytics.wordsSpoken.toLocaleString()}</span>
      </div>
      
      <div className="metric">
        <span className="label">Ë≥™ÂïèÂõûÊï∞</span>
        <span className="value">{analytics.questionsAsked}</span>
      </div>
      
      <div className="metric">
        <span className="label">„Ç®„É≥„Ç≤„Éº„Ç∏„É°„É≥„Éà</span>
        <span className="value">{analytics.engagementScore}%</span>
      </div>
      
      <div className="metric">
        <span className="label">ÁêÜËß£Â∫¶</span>
        <span className="value">{analytics.confidenceLevel}%</span>
      </div>
      
      {analytics.topicsDiscussed.length > 0 && (
        <div className="mt-4">
          <p className="text-sm text-gray-400 mb-2">Ë®éË´ñ„Éà„Éî„ÉÉ„ÇØ:</p>
          <div className="flex flex-wrap gap-1">
            {analytics.topicsDiscussed.map((topic, index) => (
              <span
                key={index}
                className="px-2 py-1 bg-purple-500/20 text-purple-300 text-xs rounded"
              >
                {topic}
              </span>
            ))}
          </div>
        </div>
      )}
    </AnalyticsCard>
  )
}

function AdvancedVoiceVisualizer({ isActive, volume }: { isActive: boolean, volume: number }) {
  return (
    <VoiceWaveContainer>
      {[...Array(50)].map((_, i) => {
        const height = isActive 
          ? Math.sin((i / 50) * Math.PI * 4) * (volume / 100) * 80 + 20
          : 20
        
        return (
          <motion.div
            key={i}
            className="wave-bar"
            animate={{
              height: `${height}px`,
              opacity: isActive ? 1 : 0.3
            }}
            transition={{
              duration: 0.1,
              ease: "easeOut"
            }}
          />
        )
      })}
    </VoiceWaveContainer>
  )
}

function InteractiveVoiceCommands() {
  const [expandedCommand, setExpandedCommand] = useState<string | null>(null)
  
  const advancedCommands = [
    {
      category: "Â≠¶ÁøíÁõ∏Ë´á",
      commands: [
        { command: "„Ç´„É™„Ç≠„É•„É©„É†„ÇíÊïô„Åà„Å¶", description: "3„É∂ÊúàÈñì„ÅÆË©≥Á¥∞„Ç´„É™„Ç≠„É•„É©„É†Ë™¨Êòé", example: "„Å©„Çì„Å™„Åì„Å®„ÇíÂ≠¶„Å∂„ÅÆÔºü" },
        { command: "ÈÄ≤ÊçóÁä∂Ê≥ÅÁ¢∫Ë™ç", description: "ÁèæÂú®„ÅÆÂ≠¶ÁøíÈÄ≤Êçó„Å®„Ç¢„Éâ„Éê„Ç§„Çπ", example: "‰ªä„Å©„Åì„Åæ„ÅßÈÄ≤„Çì„Å†Ôºü" },
        { command: "Ê¨°„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó", description: "Ê¨°„Å´Â≠¶„Å∂„Åπ„ÅçÂÜÖÂÆπ„ÅÆÊèêÊ°à", example: "Ê¨°„ÅØ‰Ωï„Çí„Åô„Çå„Å∞„ÅÑ„ÅÑÔºü" }
      ]
    },
    {
      category: "Ëµ∑Ê•≠Áõ∏Ë´á",
      commands: [
        { command: "„Éì„Ç∏„Éç„Çπ„Ç¢„Ç§„Éá„Ç¢", description: "AI√óDX„ÇíÊ¥ªÁî®„Åó„Åü„Ç¢„Ç§„Éá„Ç¢ÊèêÊ°à", example: "„Å©„Çì„Å™„Éì„Ç∏„Éç„Çπ„Åå„Åß„Åç„ÇãÔºü" },
        { command: "Â∏ÇÂ†¥ÂàÜÊûêÊñπÊ≥ï", description: "ÂäπÊûúÁöÑ„Å™Â∏ÇÂ†¥Ë™øÊüª„ÅÆ„ÇÑ„ÇäÊñπ", example: "Â∏ÇÂ†¥„Çí„Å©„ÅÜÂàÜÊûê„Åô„ÇãÔºü" },
        { command: "ÂèéÁõäÂåñÊà¶Áï•", description: "ÊúàÂèé100‰∏áÂÜÜ„Å∏„ÅÆÈÅìÁ≠ã", example: "„Å©„ÅÜ„ÇÑ„Å£„Å¶Á®º„Åê„ÅÆÔºü" }
      ]
    },
    {
      category: "ÊäÄË°ìÁõ∏Ë´á",
      commands: [
        { command: "„ÉÑ„Éº„É´ÈÅ∏ÂÆö", description: "ÊúÄÈÅ©„Å™„Éé„Éº„Ç≥„Éº„Éâ„ÉÑ„Éº„É´ÈÅ∏„Å≥", example: "„Å©„ÅÆ„ÉÑ„Éº„É´„Åå„ÅÑ„ÅÑÔºü" },
        { command: "Ëá™ÂãïÂåñË®≠Ë®à", description: "Ê•≠ÂãôËá™ÂãïÂåñ„ÅÆË®≠Ë®àÊñπÊ≥ï", example: "Ëá™ÂãïÂåñ„ÅØ„Å©„ÅÜ‰Ωú„ÇãÔºü" },
        { command: "AIÊ¥ªÁî®Ê≥ï", description: "ÂÖ∑‰ΩìÁöÑ„Å™AIÊ¥ªÁî®‰∫ã‰æã", example: "AI„Çí„Å©„ÅÜ‰Ωø„ÅÜÔºü" }
      ]
    }
  ]
  
  return (
    <div className="space-y-4">
      <h3 className="text-xl font-bold text-white mb-4">
        üé§ Èü≥Â£∞„Ç≥„Éû„É≥„ÉâÈõÜ
      </h3>
      {advancedCommands.map((category, categoryIndex) => (
        <div key={category.category} className="mb-6">
          <h4 className="text-lg font-semibold text-purple-300 mb-3">
            {category.category}
          </h4>
          <div className="space-y-2">
            {category.commands.map((cmd, index) => (
              <motion.div
                key={`${categoryIndex}-${index}`}
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: (categoryIndex * 3 + index) * 0.1 }}
                className="bg-gray-800/50 backdrop-blur-sm rounded-lg p-3 cursor-pointer hover:bg-gray-700/50 transition-colors"
                onClick={() => setExpandedCommand(
                  expandedCommand === `${categoryIndex}-${index}` 
                    ? null 
                    : `${categoryIndex}-${index}`
                )}
              >
                <div className="flex items-center justify-between">
                  <span className="font-medium text-sm text-blue-300">
                    „Äå{cmd.command}„Äç
                  </span>
                  <span className="text-xs text-gray-400">
                    {expandedCommand === `${categoryIndex}-${index}` ? '‚ñº' : '‚ñ∂'}
                  </span>
                </div>
                <AnimatePresence>
                  {expandedCommand === `${categoryIndex}-${index}` && (
                    <motion.div
                      initial={{ opacity: 0, height: 0 }}
                      animate={{ opacity: 1, height: 'auto' }}
                      exit={{ opacity: 0, height: 0 }}
                      className="mt-2 pt-2 border-t border-gray-600"
                    >
                      <p className="text-xs text-gray-300 mb-1">
                        {cmd.description}
                      </p>
                      <p className="text-xs text-purple-300">
                        ‰æã: „Äå{cmd.example}„Äç
                      </p>
                    </motion.div>
                  )}
                </AnimatePresence>
              </motion.div>
            ))}
          </div>
        </div>
      ))}
    </div>
  )
}

// Components
function VoiceVisualizer({ isActive, volume }: { isActive: boolean, volume: number }) {
  const bars = 40
  const controls = useAnimation()
  
  useEffect(() => {
    if (isActive) {
      controls.start({
        scaleY: [1, 1.5, 1],
        transition: {
          duration: 0.5,
          repeat: Infinity,
          repeatType: "reverse"
        }
      })
    } else {
      controls.stop()
      controls.set({ scaleY: 1 })
    }
  }, [isActive, controls])
  
  return (
    <div className="flex items-center justify-center gap-1 h-32">
      {[...Array(bars)].map((_, i) => {
        const height = isActive 
          ? Math.sin((i / bars) * Math.PI) * (volume / 100) * 80 + 20
          : 20
        
        return (
          <motion.div
            key={i}
            className="bg-gradient-to-t from-blue-500 to-purple-500 rounded-full"
            style={{
              width: '4px',
              height: `${height}%`
            }}
            animate={{
              height: `${height}%`,
              opacity: isActive ? 1 : 0.3
            }}
            transition={{
              duration: 0.1,
              ease: "easeOut"
            }}
          />
        )
      })}
    </div>
  )
}

function SpeechBubble({ conversation }: { conversation: Conversation }) {
  const isUser = conversation.type === 'user'
  
  return (
    <motion.div
      initial={{ opacity: 0, y: 20, scale: 0.8 }}
      animate={{ opacity: 1, y: 0, scale: 1 }}
      className={`flex ${isUser ? 'justify-end' : 'justify-start'} mb-4`}
    >
      <div className={`max-w-xs lg:max-w-md ${isUser ? 'order-2' : 'order-1'}`}>
        <div
          className={`px-4 py-3 rounded-2xl ${
            isUser
              ? 'bg-gradient-to-r from-blue-500 to-purple-500 text-white'
              : 'bg-gray-800 text-gray-100'
          }`}
        >
          <p className="text-sm lg:text-base">{conversation.text}</p>
        </div>
        <p className="text-xs text-gray-500 mt-1 px-2">
          {conversation.timestamp.toLocaleTimeString('ja-JP', {
            hour: '2-digit',
            minute: '2-digit'
          })}
        </p>
      </div>
      <div className={`w-10 h-10 rounded-full flex items-center justify-center ${
        isUser ? 'order-1 mr-3' : 'order-2 ml-3'
      } ${isUser ? 'bg-blue-500' : 'bg-purple-500'}`}>
        {isUser ? 'üë§' : 'ü§ñ'}
      </div>
    </motion.div>
  )
}

function SmartVoiceCommands() {
  const { selectedCoach, coaches } = useVoiceStore()
  const activeCoach = coaches.find(c => c.id === selectedCoach)
  
  const basicCommands = [
    { command: "„Åì„Çì„Å´„Å°„ÅØ", description: "AI„Ç≥„Éº„ÉÅ„Å®„ÅÆ‰ºöË©±ÈñãÂßã" },
    { command: "„Ç´„É™„Ç≠„É•„É©„É†„ÇíÊïô„Åà„Å¶", description: "Â≠¶ÁøíÂÜÖÂÆπ„ÅÆË©≥Á¥∞Ë™¨Êòé" },
    { command: "ÈÄ≤ÊçóÁä∂Ê≥ÅÁ¢∫Ë™ç", description: "ÁèæÂú®„ÅÆÂ≠¶ÁøíÈÄ≤Êçó„ÉÅ„Çß„ÉÉ„ÇØ" },
    { command: "Ê¨°„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó", description: "Ê¨°„Å´Â≠¶„Å∂„Åπ„ÅçÂÜÖÂÆπÊèêÊ°à" },
    { command: "ÊñôÈáë„ÇíÊïô„Åà„Å¶", description: "ÂèóË¨õÊñôÈáë„ÅÆË©≥Á¥∞Ê°àÂÜÖ" },
    { command: "Áî≥„ÅóËæº„ÅøÊñπÊ≥ï", description: "ÂÖ•Â≠¶ÊâãÁ∂ö„Åç„ÅÆË™¨Êòé" }
  ]
  
  return (
    <div className="bg-gray-800/50 backdrop-blur-sm rounded-xl p-6">
      <h3 className="text-lg font-semibold mb-4 text-purple-400">
        üéØ Èü≥Â£∞„Ç≥„Éû„É≥„ÉâÔºà{activeCoach?.name}„É¢„Éº„ÉâÔºâ
      </h3>
      <div className="space-y-2">
        {basicCommands.map((cmd, index) => (
          <motion.div
            key={index}
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: index * 0.1 }}
            className="flex flex-col p-3 bg-gray-700/50 rounded-lg hover:bg-gray-600/50 transition-colors cursor-pointer"
            whileHover={{ scale: 1.02 }}
          >
            <div className="flex items-center justify-between mb-1">
              <span className="font-medium text-sm text-blue-300">„Äå{cmd.command}„Äç</span>
              <span className="text-xs text-green-400">‚úì</span>
            </div>
            <span className="text-xs text-gray-400">{cmd.description}</span>
          </motion.div>
        ))}
      </div>
      
      <div className="mt-4 p-3 bg-purple-500/10 rounded-lg border border-purple-500/20">
        <p className="text-xs text-purple-300">
          üí° „Éí„É≥„Éà: Ëá™ÁÑ∂„Å™Êó•Êú¨Ë™û„ÅßË©±„Åó„Åã„Åë„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇAI„ÅåÊñáËÑà„ÇíÁêÜËß£„Åó„Å¶ÈÅ©Âàá„Å´ÂõûÁ≠î„Åó„Åæ„Åô„ÄÇ
        </p>
      </div>
    </div>
  )
}

function EnhancedMicrophoneButton() {
  const { voiceState, setListening, setError, updateAnalytics } = useVoiceStore()
  const recognitionRef = useRef<any>(null)
  const sessionStartTime = useRef<number>(Date.now())
  
  const startListening = useCallback(() => {
    if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
      setError('„Åä‰Ωø„ÅÑ„ÅÆ„Éñ„É©„Ç¶„Ç∂„ÅØÈü≥Â£∞Ë™çË≠ò„Å´ÂØæÂøú„Åó„Å¶„ÅÑ„Åæ„Åõ„Çì')
      return
    }
    
    const SpeechRecognition = (window as any).webkitSpeechRecognition || (window as any).SpeechRecognition
    const recognition = new SpeechRecognition()
    
    recognition.lang = 'ja-JP'
    recognition.continuous = true
    recognition.interimResults = true
    
    recognition.onstart = () => {
      setListening(true)
      setError(null)
      sessionStartTime.current = Date.now()
    }
    
    recognition.onresult = (event: any) => {
      const transcript = Array.from(event.results)
        .map((result: any) => result[0].transcript)
        .join('')
      
      useVoiceStore.getState().setTranscript(transcript)
      
      // Check if the result is final
      if (event.results[event.results.length - 1].isFinal) {
        processVoiceCommand(transcript)
        
        // Update analytics
        const wordCount = transcript.split(' ').length
        updateAnalytics({
          wordsSpoken: useVoiceStore.getState().analytics.wordsSpoken + wordCount,
          sessionTime: Math.floor((Date.now() - sessionStartTime.current) / 1000)
        })
      }
    }
    
    recognition.onerror = (event: any) => {
      setError(`Èü≥Â£∞Ë™çË≠ò„Ç®„É©„Éº: ${event.error}`)
      setListening(false)
    }
    
    recognition.onend = () => {
      setListening(false)
      const sessionDuration = Math.floor((Date.now() - sessionStartTime.current) / 1000)
      updateAnalytics({ sessionTime: sessionDuration })
    }
    
    recognition.start()
    recognitionRef.current = recognition
  }, [setListening, setError, updateAnalytics])
  
  const stopListening = useCallback(() => {
    if (recognitionRef.current) {
      recognitionRef.current.stop()
      setListening(false)
    }
  }, [setListening])
  
  const processVoiceCommand = (command: string) => {
    const { addConversation, updateAnalytics, selectedCoach, coaches } = useVoiceStore.getState()
    
    // Add user message
    addConversation('user', command)
    
    // Update analytics
    const isQuestion = command.includes('Ôºü') || command.includes('?') || 
                      command.includes('„Å©„ÅÜ') || command.includes('„Å™„Å´') || 
                      command.includes('„ÅÑ„Å§') || command.includes('„Å©„Åì')
    
    if (isQuestion) {
      updateAnalytics({
        questionsAsked: useVoiceStore.getState().analytics.questionsAsked + 1
      })
    }
    
    // Advanced response logic with coach personality
    const activeCoach = coaches.find(c => c.id === selectedCoach)
    let response = ''
    let topics: string[] = []
    
    if (command.includes('„Åì„Çì„Å´„Å°„ÅØ') || command.includes('„Éè„É≠„Éº')) {
      response = `„Åì„Çì„Å´„Å°„ÅØÔºÅÁßÅ„ÅØ${activeCoach?.name}„Åß„Åô„ÄÇAIDXschool„ÅßAI√óDXËµ∑Ê•≠„Çí„Çµ„Éù„Éº„Éà„Åó„Åæ„Åô„ÄÇ‰Ωï„Åã„ÅîË≥™Âïè„ÅØ„ÅÇ„Çä„Åæ„Åô„ÅãÔºü`
      topics = ['Êå®Êã∂']
    } else if (command.includes('„Ç´„É™„Ç≠„É•„É©„É†') || command.includes('Â≠¶ÁøíÂÜÖÂÆπ')) {
      response = 'AIDXschool„Åß„ÅØ3„É∂Êúà„ÅßËµ∑Ê•≠„Çπ„Ç≠„É´„ÇíË∫´„Å´„Å§„Åë„Åæ„Åô„ÄÇ1„É∂ÊúàÁõÆÔºöÂü∫Á§éÁü•Ë≠ò„ÄÅ2„É∂ÊúàÁõÆÔºö„ÉÑ„Éº„É´ÁøíÂæó„ÄÅ3„É∂ÊúàÁõÆÔºöÂÆüË∑µ„Å®„É≠„Éº„É≥„ÉÅ„ÄÇÂÖ∑‰ΩìÁöÑ„Å´„Å©„ÅÆÈÉ®ÂàÜ„Å´„Å§„ÅÑ„Å¶Ë©≥„Åó„ÅèÁü•„Çä„Åü„ÅÑ„Åß„Åô„ÅãÔºü'
      topics = ['„Ç´„É™„Ç≠„É•„É©„É†', 'Â≠¶ÁøíË®àÁîª']
    } else if (command.includes('ÈÄ≤Êçó') || command.includes('„Å©„Åì„Åæ„Åß')) {
      const modules = useVoiceStore.getState().modules
      const totalProgress = modules.reduce((sum, m) => sum + m.progress, 0) / modules.length
      response = `ÁèæÂú®„ÅÆÂ≠¶ÁøíÈÄ≤Êçó„ÅØ${Math.round(totalProgress)}%„Åß„Åô„ÄÇ${totalProgress < 30 ? 'Âü∫Á§éÂõ∫„ÇÅ„ÅÆÊÆµÈöé„Åß„Åô„Å≠' : totalProgress < 70 ? 'È†ÜË™ø„Å´ÈÄ≤„Çì„Åß„ÅÑ„Åæ„Åô' : 'Á¥†Êô¥„Çâ„Åó„ÅÑÈÄ≤Êçó„Åß„ÅôÔºÅ'}„ÄÇÊ¨°„ÅØ‰Ωï„ÇíÂ≠¶Áøí„Åó„Åæ„Åó„Çá„ÅÜ„ÅãÔºü`
      topics = ['ÈÄ≤ÊçóÁ¢∫Ë™ç', 'Â≠¶ÁøíÁä∂Ê≥Å']
    } else if (command.includes('Ëµ∑Ê•≠') || command.includes('„Éì„Ç∏„Éç„Çπ')) {
      response = 'AIDXschool„Åß„ÅØ„ÄÅAI√óDX„ÇíÊ¥ªÁî®„Åó„ÅüËµ∑Ê•≠ÊñπÊ≥ï„ÇíÂÆüË∑µÁöÑ„Å´Â≠¶„Åπ„Åæ„Åô„ÄÇ„Éé„Éº„Ç≥„Éº„Éâ„ÉÑ„Éº„É´„Çí‰Ωø„Å£„Å¶„ÄÅÊúÄÁü≠3„É∂Êúà„ÅßÊúàÂèé100‰∏áÂÜÜ„ÇíÁõÆÊåá„Åó„Åæ„Åô„ÄÇ„Å©„ÅÆ„Çà„ÅÜ„Å™ÂàÜÈáé„Åß„ÅÆËµ∑Ê•≠„Çí„ÅäËÄÉ„Åà„Åß„Åô„ÅãÔºü'
      topics = ['Ëµ∑Ê•≠', '„Éì„Ç∏„Éç„Çπ„É¢„Éá„É´']
    } else if (command.includes('ÊñôÈáë') || command.includes('‰æ°Ê†º') || command.includes('Ë≤ªÁî®')) {
      response = 'ÂèóË¨õÊñô„ÅØÊúàÈ°çÂà∂„Åß„ÄÅÂü∫Êú¨„Ç≥„Éº„Çπ29,800ÂÜÜ„ÄÅ„Éó„É¨„Éü„Ç¢„É†„Ç≥„Éº„Çπ49,800ÂÜÜ„Çí„ÅîÁî®ÊÑè„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇÁÑ°Êñô‰ΩìÈ®ìÊúüÈñì„ÇÇ„ÅÇ„Çä„Åæ„Åô„ÅÆ„Åß„ÄÅ„Åæ„Åö„ÅØ„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ'
      topics = ['ÊñôÈáë', 'Ë≤ªÁî®']
    } else if (command.includes('Áî≥„ÅóËæº„Åø') || command.includes('Áî≥Ëæº') || command.includes('ÂÖ•Â≠¶')) {
      response = 'Áî≥„ÅóËæº„Åø„ÅØÁ∞°Âçò3„Çπ„ÉÜ„ÉÉ„Éó„Åß„ÅôÔºÅ1.ÁÑ°ÊñôÁõ∏Ë´á‰∫àÁ¥Ñ„ÄÅ2.„Ç´„Ç¶„É≥„Çª„É™„É≥„Ç∞„ÄÅ3.„Ç≥„Éº„ÇπÈÅ∏Êäû„ÄÇ‰ªä„Åô„ÅêÁÑ°ÊñôÁõ∏Ë´á„Åã„ÇâÂßã„ÇÅ„Åæ„Åõ„Çì„ÅãÔºü'
      topics = ['Áî≥ËæºÊâãÁ∂ö„Åç', 'ÂÖ•Â≠¶']
    } else if (command.includes('„ÉÑ„Éº„É´') || command.includes('ÊäÄË°ì')) {
      response = 'Zapier„ÄÅMake„ÄÅBubble„ÄÅNotion„ÄÅChatGPT„Å™„Å©„ÄÅÊúÄÊñ∞„ÅÆ„Éé„Éº„Ç≥„Éº„Éâ„ÉÑ„Éº„É´„Å®AI„ÇíÁµÑ„ÅøÂêà„Çè„Åõ„Å¶ÂäπÁéáÁöÑ„Å™„Éì„Ç∏„Éç„Çπ„ÇíÊßãÁØâ„Åó„Åæ„Åô„ÄÇÂÖ∑‰ΩìÁöÑ„Å´„Å©„ÅÆ„ÉÑ„Éº„É´„Å´„Å§„ÅÑ„Å¶Áü•„Çä„Åü„ÅÑ„Åß„Åô„ÅãÔºü'
      topics = ['„ÉÑ„Éº„É´', 'ÊäÄË°ì„Çπ„Çø„ÉÉ„ÇØ']
    } else if (command.includes('ÊàêÂäü‰∫ã‰æã') || command.includes('ÂÆüÁ∏æ')) {
      response = 'ÂèóË¨õÁîü„ÅÆ90%„Åå3„É∂Êúà‰ª•ÂÜÖ„Å´ÂèéÁõäÂåñ„Å´ÊàêÂäü„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ‰æã„Åà„Å∞„ÄÅAI „ÉÅ„É£„ÉÉ„Éà„Éú„ÉÉ„Éà‰∫ãÊ•≠„ÅßÊúàÂèé50‰∏áÂÜÜ„ÄÅËá™ÂãïÂåñ„Ç≥„É≥„Çµ„É´„ÅßÊúàÂèé80‰∏áÂÜÜ„Å™„Å©„ÄÅÂ§öÊßò„Å™ÊàêÂäü‰æã„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ'
      topics = ['ÊàêÂäü‰∫ã‰æã', 'ÂÆüÁ∏æ']
    } else {
      response = `${activeCoach?.name}„Åß„Åô„ÄÇ„ÅîË≥™Âïè„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åô„ÄÇ„Çà„ÇäË©≥„Åó„Åè„ÅäÁ≠î„Åà„Åô„Çã„Åü„ÇÅ„Å´„ÄÅÁÑ°ÊñôÁõ∏Ë´á„Çí„ÅîÂà©Áî®„Åè„Å†„Åï„ÅÑ„ÄÇ„Å©„ÅÆ„Çà„ÅÜ„Å™ÂàÜÈáé„Å´„Å§„ÅÑ„Å¶Ë©≥„Åó„ÅèÁü•„Çä„Åü„ÅÑ„Åß„Åô„ÅãÔºü`
      topics = ['‰∏ÄËà¨ÁöÑ„Å™Ë≥™Âïè']
    }
    
    // Update topics discussed
    const currentTopics = useVoiceStore.getState().analytics.topicsDiscussed
    const newTopics = [...new Set([...currentTopics, ...topics])]
    updateAnalytics({ topicsDiscussed: newTopics })
    
    // Add AI response with delay
    setTimeout(() => {
      addConversation('ai', response)
      speak(response)
      
      // Update engagement score based on interaction
      const currentEngagement = useVoiceStore.getState().analytics.engagementScore
      updateAnalytics({
        engagementScore: Math.min(currentEngagement + 5, 100)
      })
    }, 1000)
  }
  
  const speak = (text: string) => {
    if ('speechSynthesis' in window) {
      const utterance = new SpeechSynthesisUtterance(text)
      utterance.lang = 'ja-JP'
      utterance.rate = 1.0
      utterance.pitch = 1.0
      speechSynthesis.speak(utterance)
    }
  }
  
  return (
    <MicButton
      whileHover={{ scale: 1.1 }}
      whileTap={{ scale: 0.9 }}
      onClick={voiceState.isListening ? stopListening : startListening}
      className={voiceState.isListening ? 'listening' : ''}
    >
      <motion.div
        animate={voiceState.isListening ? { 
          scale: [1, 1.2, 1],
          rotate: [0, 5, -5, 0]
        } : { scale: 1 }}
        transition={{ 
          duration: 1, 
          repeat: voiceState.isListening ? Infinity : 0,
          ease: "easeInOut"
        }}
      >
        {voiceState.isListening ? 'üî¥' : 'üéôÔ∏è'}
      </motion.div>
      
      {voiceState.isListening && (
        <>
          <motion.div
            className="absolute inset-0 rounded-full border-4 border-white"
            initial={{ scale: 0.8, opacity: 1 }}
            animate={{ scale: 1.8, opacity: 0 }}
            transition={{ duration: 2, repeat: Infinity }}
          />
          <motion.div
            className="absolute inset-0 rounded-full border-2 border-red-300"
            initial={{ scale: 1.2, opacity: 0.5 }}
            animate={{ scale: 2.2, opacity: 0 }}
            transition={{ duration: 1.5, repeat: Infinity, delay: 0.3 }}
          />
        </>
      )}
    </MicButton>
  )
}

function TranscriptDisplay() {
  const { voiceState } = useVoiceStore()
  
  return (
    <AnimatePresence>
      {voiceState.transcript && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0, y: -20 }}
          className="bg-gray-800/80 backdrop-blur-sm rounded-xl p-4 max-w-lg mx-auto"
        >
          <p className="text-gray-300 text-sm">Ë™çË≠ò‰∏≠„ÅÆ„ÉÜ„Ç≠„Çπ„Éà:</p>
          <p className="text-white text-lg mt-2">{voiceState.transcript}</p>
        </motion.div>
      )}
    </AnimatePresence>
  )
}

// Main Component
export default function LP6_VoiceInteractive() {
  const { conversations, voiceState, setVolume, updateAnalytics } = useVoiceStore()
  const conversationEndRef = useRef<HTMLDivElement>(null)
  
  // Auto-scroll to latest message
  useEffect(() => {
    conversationEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }, [conversations])
  
  // Enhanced Volume meter with analytics
  useEffect(() => {
    if (!voiceState.isListening) return
    
    navigator.mediaDevices.getUserMedia({ audio: true })
      .then(stream => {
        const audioContext = new AudioContext()
        const analyser = audioContext.createAnalyser()
        const microphone = audioContext.createMediaStreamSource(stream)
        const dataArray = new Uint8Array(analyser.frequencyBinCount)
        
        microphone.connect(analyser)
        analyser.fftSize = 512
        
        let volumeHistory: number[] = []
        
        const checkVolume = () => {
          analyser.getByteFrequencyData(dataArray)
          const average = dataArray.reduce((a, b) => a + b) / dataArray.length
          setVolume(average)
          
          // Track volume history for confidence analysis
          volumeHistory.push(average)
          if (volumeHistory.length > 100) volumeHistory.shift()
          
          // Update confidence level based on voice clarity
          const avgVolume = volumeHistory.reduce((a, b) => a + b, 0) / volumeHistory.length
          const confidenceLevel = Math.min(Math.max((avgVolume / 50) * 100, 20), 100)
          updateAnalytics({ confidenceLevel })
          
          if (voiceState.isListening) {
            requestAnimationFrame(checkVolume)
          }
        }
        
        checkVolume()
        
        return () => {
          stream.getTracks().forEach(track => track.stop())
          audioContext.close()
        }
      })
      .catch(err => {
        console.error('Microphone access error:', err)
        updateAnalytics({ confidenceLevel: 0 })
      })
  }, [voiceState.isListening, setVolume, updateAnalytics])
  
  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-purple-900/20 to-gray-900">
      {/* Animated Background */}
      <div className="fixed inset-0 overflow-hidden pointer-events-none">
        <div className="absolute inset-0">
          {[...Array(20)].map((_, i) => (
            <motion.div
              key={i}
              className="absolute w-64 h-64 bg-purple-500/10 rounded-full blur-3xl"
              initial={{
                x: Math.random() * window.innerWidth,
                y: Math.random() * window.innerHeight,
              }}
              animate={{
                x: Math.random() * window.innerWidth,
                y: Math.random() * window.innerHeight,
              }}
              transition={{
                duration: Math.random() * 20 + 10,
                repeat: Infinity,
                repeatType: "reverse",
              }}
            />
          ))}
        </div>
      </div>
      
      {/* Header */}
      <header className="relative z-10 p-6 text-center">
        <motion.h1
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-4xl md:text-6xl font-bold text-white mb-4"
        >
          <span className="text-gradient">Â£∞„ÅßÂØæË©±„Åô„Çã</span>
          <br />
          Ëµ∑Ê•≠Áõ∏Ë´áAI
        </motion.h1>
        <motion.p
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.2 }}
          className="text-xl text-gray-300"
        >
          „Éû„Ç§„ÇØ„Éú„Çø„É≥„ÇíÊäº„Åó„Å¶„ÄÅAI„Ç¢„Éâ„Éê„Ç§„Ç∂„Éº„Å®Ë©±„Åó„Å¶„Åø„Åæ„Åó„Çá„ÅÜ
        </motion.p>
      </header>
      
      {/* Main Content */}
      <main className="relative z-10 container mx-auto px-4 pb-32">
        {/* Learning Modules Section */}
        <Container>
          <div className="max-w-4xl mx-auto mb-12">
            <LearningModulesList />
          </div>
        </Container>
        
        {/* Interactive Voice Section */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 max-w-6xl mx-auto">
          {/* Left Panel - Enhanced Features */}
          <div className="lg:col-span-1 space-y-6">
            <SmartVoiceCommands />
            <CoachPersonalitySelector />
          </div>
          
          {/* Center - Enhanced Voice Interface */}
          <div className="lg:col-span-1 flex flex-col items-center">
            <AdvancedVoiceVisualizer isActive={voiceState.isListening} volume={voiceState.volume} />
            
            <div className="my-8">
              <EnhancedMicrophoneButton />
            </div>
            
            <p className="text-gray-400 text-center mb-4">
              {voiceState.isListening ? '„ÅäË©±„Åó„Åè„Å†„Åï„ÅÑ...' : '„Éû„Ç§„ÇØ„Çí„Çø„ÉÉ„Éó„Åó„Å¶ÈñãÂßã'}
            </p>
            
            <TranscriptDisplay />
            
            {voiceState.error && (
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                className="mt-4 p-4 bg-red-500/20 border border-red-500 rounded-lg text-red-300"
              >
                {voiceState.error}
              </motion.div>
            )}
          </div>
          
          {/* Right Panel - Analytics & Conversation */}
          <div className="lg:col-span-1 space-y-6">
            <div className="bg-gray-800/50 backdrop-blur-sm rounded-xl p-6 h-64 overflow-y-auto">
              <h3 className="text-lg font-semibold mb-4 text-purple-400">
                üí¨ AIÂØæË©±Â±•Ê≠¥
              </h3>
              <div className="space-y-4">
                {conversations.length === 0 ? (
                  <p className="text-gray-500 text-center text-sm">
                    Èü≥Â£∞„ÅßAI„Ç≥„Éº„ÉÅ„Å®ÂØæË©±„Åó„Å¶„Åø„Åæ„Åó„Çá„ÅÜ
                  </p>
                ) : (
                  conversations.map(conv => (
                    <SpeechBubble key={conv.id} conversation={conv} />
                  ))
                )}
                <div ref={conversationEndRef} />
              </div>
            </div>
            
            <VoiceAnalyticsDashboard />
          </div>
        </div>
        
        {/* Interactive Voice Commands Guide */}
        <div className="max-w-4xl mx-auto mt-12">
          <InteractiveVoiceCommands />
        </div>
        
        {/* Enhanced CTA Section */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.5 }}
          className="text-center mt-12"
        >
          <div className="bg-gradient-to-r from-purple-900/30 to-blue-900/30 backdrop-blur-sm rounded-2xl p-8 border border-purple-500/20">
            <h3 className="text-2xl font-bold text-white mb-4">
              üéÜ Êú™Êù•„ÅÆËµ∑Ê•≠ÂÆ∂„Å´„Å™„Çä„Åæ„Åõ„Çì„ÅãÔºü
            </h3>
            <p className="text-gray-300 mb-6 max-w-2xl mx-auto">
              Èü≥Â£∞„ÅßAI„Ç≥„Éº„ÉÅ„Å®ÂØæË©±„Åó„ÄÅ„ÅÇ„Å™„Åü„ÅÆËµ∑Ê•≠„Éó„É©„É≥„Çí‰∏ÄÁ∑í„Å´Á∑¥„Çä‰∏ä„Åí„Åæ„Åó„Çá„ÅÜ„ÄÇ
              AI√óDX„ÇíÊ¥ªÁî®„Åó„ÅüÊúÄÊñ∞„ÅÆËµ∑Ê•≠ÊâãÊ≥ï„Çí3„É∂Êúà„Åß„Éû„Çπ„Çø„Éº„Åó„ÄÅÊúàÂèé100‰∏áÂÜÜ„ÇíÁõÆÊåá„Åó„Åæ„Åõ„Çì„ÅãÔºü
            </p>
            
            <div className="flex flex-col sm:flex-row gap-4 justify-center items-center">
              <motion.button
                whileHover={{ scale: 1.05, boxShadow: "0 0 30px rgba(78, 181, 255, 0.5)" }}
                whileTap={{ scale: 0.95 }}
                className="px-8 py-4 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full font-bold text-lg text-white shadow-lg"
              >
                üìû ÁÑ°ÊñôÈü≥Â£∞Áõ∏Ë´á„Çí‰∫àÁ¥Ñ
              </motion.button>
              
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                className="px-8 py-4 bg-transparent border-2 border-purple-400 rounded-full font-bold text-lg text-purple-300 hover:bg-purple-400/10 transition-colors"
              >
                üìÑ Ë©≥Á¥∞Ë≥áÊñô„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
              </motion.button>
            </div>
            
            <div className="mt-6 flex flex-wrap justify-center gap-4 text-sm text-gray-400">
              <span>‚úì ÁÑ°Êñô‰ΩìÈ®ìÊúüÈñì„ÅÇ„Çä</span>
              <span>‚úì 24ÊôÇÈñì„Çµ„Éù„Éº„Éà</span>
              <span>‚úì ÊàêÂäü„Åæ„ÅßÂæπÂ∫ï„Çµ„Éù„Éº„Éà</span>
            </div>
          </div>
        </motion.div>
      </main>
      
      {/* Enhanced Feature Pills */}
      <div className="fixed bottom-8 left-8 right-8 flex justify-center gap-3 flex-wrap z-50">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.6 }}
          className="bg-gray-800/90 backdrop-blur-sm rounded-full px-4 py-2 text-sm border border-purple-500/30 hover:border-purple-400 transition-colors cursor-pointer"
          whileHover={{ scale: 1.05, y: -2 }}
        >
          üîí „Éó„É©„Ç§„Éê„Ç∑„Éº‰øùË≠∑
        </motion.div>
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.7 }}
          className="bg-gray-800/90 backdrop-blur-sm rounded-full px-4 py-2 text-sm border border-blue-500/30 hover:border-blue-400 transition-colors cursor-pointer"
          whileHover={{ scale: 1.05, y: -2 }}
        >
          üåê Êó•Êú¨Ë™û„ÉªËã±Ë™ûÂØæÂøú
        </motion.div>
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.8 }}
          className="bg-gray-800/90 backdrop-blur-sm rounded-full px-4 py-2 text-sm border border-green-500/30 hover:border-green-400 transition-colors cursor-pointer"
          whileHover={{ scale: 1.05, y: -2 }}
        >
          ‚ôø „Ç¢„ÇØ„Çª„Ç∑„Éì„É™„ÉÜ„Ç£ÂØæÂøú
        </motion.div>
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.9 }}
          className="bg-gray-800/90 backdrop-blur-sm rounded-full px-4 py-2 text-sm border border-yellow-500/30 hover:border-yellow-400 transition-colors cursor-pointer"
          whileHover={{ scale: 1.05, y: -2 }}
        >
          ü§ñ AI„Ç≥„Éº„ÉÅÂ∏∏Èßê
        </motion.div>
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 1.0 }}
          className="bg-gray-800/90 backdrop-blur-sm rounded-full px-4 py-2 text-sm border border-pink-500/30 hover:border-pink-400 transition-colors cursor-pointer"
          whileHover={{ scale: 1.05, y: -2 }}
        >
          üìà „É™„Ç¢„É´„Çø„Ç§„É†ÂàÜÊûê
        </motion.div>
      </div>
      
      {/* Floating Success Stories */}
      <div className="fixed top-1/2 right-8 transform -translate-y-1/2 z-40 hidden xl:block">
        <motion.div
          initial={{ x: 100, opacity: 0 }}
          animate={{ x: 0, opacity: 1 }}
          transition={{ delay: 1.2, duration: 0.8 }}
          className="bg-gradient-to-br from-green-500/20 to-blue-500/20 backdrop-blur-sm rounded-xl p-4 border border-green-400/30 max-w-xs"
        >
          <h4 className="text-sm font-bold text-green-300 mb-2">
            üéÜ ÊúÄÊñ∞ÊàêÊûú
          </h4>
          <p className="text-xs text-gray-300 mb-1">
            Áî∞‰∏≠„Åï„ÇìÔºàITÊ•≠ÁïåÔºâ
          </p>
          <p className="text-xs text-gray-400">
            AI„ÉÅ„É£„ÉÉ„Éà„Éú„ÉÉ„Éà‰∫ãÊ•≠„ÅßÊúàÂèé<span className="text-green-300 font-bold">85‰∏áÂÜÜ</span>ÈÅîÊàêÔºÅ
          </p>
        </motion.div>
      </div>
      
      {/* Floating Learning Progress */}
      <div className="fixed top-1/3 left-8 z-40 hidden xl:block">
        <motion.div
          initial={{ x: -100, opacity: 0 }}
          animate={{ x: 0, opacity: 1 }}
          transition={{ delay: 1.4, duration: 0.8 }}
          className="bg-gradient-to-br from-purple-500/20 to-pink-500/20 backdrop-blur-sm rounded-xl p-4 border border-purple-400/30 max-w-xs"
        >
          <h4 className="text-sm font-bold text-purple-300 mb-2">
            üìä „É™„Ç¢„É´„Çø„Ç§„É†Áä∂Ê≥Å
          </h4>
          <div className="space-y-2">
            <div className="text-xs">
              <span className="text-gray-400">„Ç™„É≥„É©„Ç§„É≥‰∏≠:</span>
              <span className="text-green-300 font-bold ml-1">127Âêç</span>
            </div>
            <div className="text-xs">
              <span className="text-gray-400">‰ªäÊó•„ÅÆÁõ∏Ë´á:</span>
              <span className="text-blue-300 font-bold ml-1">43‰ª∂</span>
            </div>
          </div>
        </motion.div>
      </div>
      
      {/* Global Styles for Text Gradient */}
      <style jsx global>{`
        .text-gradient {
          background: linear-gradient(135deg, #4EB5FF 0%, #38C172 50%, #FFD93D 100%);
          -webkit-background-clip: text;
          -webkit-text-fill-color: transparent;
          background-clip: text;
        }
        
        .wave-bar {
          background: linear-gradient(135deg, #4EB5FF 0%, #38C172 50%, #FFD93D 100%);
        }
        
        /* „Ç´„Çπ„Çø„É†„Çπ„ÇØ„É≠„Éº„É´„Éê„Éº */
        ::-webkit-scrollbar {
          width: 6px;
        }
        
        ::-webkit-scrollbar-track {
          background: rgba(255, 255, 255, 0.1);
          border-radius: 3px;
        }
        
        ::-webkit-scrollbar-thumb {
          background: linear-gradient(135deg, #4EB5FF, #9333EA);
          border-radius: 3px;
        }
        
        ::-webkit-scrollbar-thumb:hover {
          background: linear-gradient(135deg, #38C172, #EC4899);
        }
      `}</style>
    </div>
  )
}